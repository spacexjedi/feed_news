{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar graphqlFetch = require('graphql-fetch')('https://www.graphqlhub.com/graphql');\n\nvar graphqlQuery = function graphqlQuery(category) {\n  return \"\\n{\\n  hn {\\n    \".concat(category, \" Stories (limit: 50) {\\n      title\\n      url\\n      timeISO\\n      by {\\n        id\\n      }\\n    }\\n  }\\n}\\n\");\n};\n\nvar fetchStories = function fetchStories(category) {\n  var res;\n  return _regeneratorRuntime.async(function fetchStories$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(graphqlFetch(graphqlQuery(category)));\n\n        case 2:\n          res = _context.sent;\n          return _context.abrupt(\"return\", {\n            stories: res.data.hn[\"\".concat(category, \"Stories\")]\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport { fetchStories };","map":{"version":3,"sources":["/home/runner/AnotherAnotherHackerNewsClone/api.js"],"names":["graphqlFetch","require","graphqlQuery","category","fetchStories","res","stories","data","hn"],"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAAP,CAA0B,oCAA1B,CAArB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD;AAAA,oCAGfA,QAHe;AAAA,CAArB;;AAeA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOD,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACDH,YAAY,CAACE,YAAY,CAACC,QAAD,CAAb,CADX;;AAAA;AACbE,UAAAA,GADa;AAAA,2CAEZ;AAACC,YAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASC,EAAT,WAAgBL,QAAhB;AAAV,WAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAKA,SAAQC,YAAR","sourcesContent":["const graphqlFetch = require('graphql-fetch') ('https://www.graphqlhub.com/graphql')\n\nconst graphqlQuery = (category) => `\n{\n  hn {\n    ${category} Stories (limit: 50) {\n      title\n      url\n      timeISO\n      by {\n        id\n      }\n    }\n  }\n}\n`\n\nconst fetchStories = async (category) => {\n  const res = await graphqlFetch(graphqlQuery(category))\n  return {stories: res.data.hn [`${category}Stories`]}\n}\n\nexport {fetchStories}"]},"metadata":{},"sourceType":"module"}